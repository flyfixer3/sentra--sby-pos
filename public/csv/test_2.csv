// $test = Product::
        // $test = Mutation::with('product')
        // ->latest()
        // ->get()
        // ->unique('product_id');
        // // ->sortByDesc('stock_last');
        // // dd($test[0]);
        // foreach($test as $pos){
        //     // dd($pos->stock_last);
        //     $product = Product::where('id', $pos->product_id )->first();
        //     $product->update([
        //         'product_quantity' => $pos->stock_last
        //     ]);
        // }

        // $test = Purchase::get();

        // foreach($test as $pos){
        //     if($pos->payment_status == 'Paid'){
        //         $created_payment = PurchasePayment::create([
        //             'date' => $ks[2],
        //             'reference' => $purchase->reference,
        //             'amount' => $purchase->paid_amount,
        //             'note' => 'Payment',
        //             'purchase_id' => $purchase->id,
        //             'payment_method' => '1-10002'
        //         ]);
        //         Helper::addNewTransaction([
        //              'date'=> $ks[2],
        //              'label' => "Payment for Purchase Order #".$purchase->reference,
        //              'description' => "Purchase ID: ".$purchase->reference,
        //              'purchase_id' => null,
        //              'purchase_payment_id' => $created_payment->id,
        //              'purchase_return_id' => null,
        //              'purchase_return_payment_id' => null,
        //              'sale_id' => null,
        //              'sale_payment_id' => null,
        //              'sale_return_id' => null,
        //              'sale_return_payment_id' => null,
        //          ], [
        //              [
        //                  'subaccount_number' => '1-10200', // Persediaan dalam pengiriman
        //                  'amount' => $created_payment->amount,
        //                  'type' => 'debit'
        //              ],
        //              [
        //                  'subaccount_number' => $created_payment->payment_method, // Kas
        //                  'amount' => $created_payment->amount,
        //                  'type' => 'credit'
        //              ]
        //          ]);
        //     }
        // }

        
        // ->sum('stock_last');
        // dd($test[0]);
        // $weeks = Timesheet::where('week_ending', $request->week_ending)->get();
        // $week_ending = Carbon::parse($request->week_ending)->format('d-m-Y');
        // $html = '';
        // foreach($weeks as $hours)
        // {
        //     $view = view('pdf.timesheet')->with(compact('hours', 'week_ending'));
        //     $html .= $view->render();
        // }
        // $pdf = PDF::loadHTML($html);            
        // $sheet = $pdf->setPaper('a4', 'landscape');
        // return $sheet->download('download.pdf');

        //Download All PDF POS
        // ini_set('max_execution_time',3600);
        // $sales = \Modules\Sale\Entities\Sale::whereMonth('date','=','10')->get();
        // // dd($sales);
        // // $html='';
        // foreach($sales as $index=>$sale){
        //     // dd($sale);
        //     $customer = \Modules\People\Entities\Customer::findOrFail($sale->customer_id);
        //     // $html .= $view->render();
        //     //     // ->setOption('margin-top', 8)
        //     //     // ->setOption('margin-bottom', 8)
        //     //     // ->setOption('margin-left', 5)
        //     //     // ->setOption('margin-right', 5);
        //     // $user_details = Users::where('id',$invoice->user_id)->first();
        //     $html = '';
        //     $view =view('sale::print-pos', [
        //         'sale' => $sale,
        //         'customer' => $customer,
        //     ]);
        //     // $view = view('pdf.invoice_compact')->with(compact('user_details','invoice'));
        //     $html .= $view->render();
        //     \PDF::loadHTML($html)->save(public_path().'/oktober/'.$sale->reference.'.pdf');
        // }
        // // $pdf = \PDF::loadHtml($html);
        // $sheet = $pdf->setPaper('a4');
        // return $sheet->download('sale.pdf');

        // //penjualan header & detil
        // $csvFileName = "penj_b_okt_2.csv";
        // $csvFile = public_path('csv/' . $csvFileName);
        // $konsyinasi = $this->readCSV($csvFile,array('delimiter' => ','));
        // $header_temp="";
        // $total_amount = 0;
        // $total_quantity = 0;
        // $total_hpp = 0;
        // // dd($konsyinasi);
        // foreach($konsyinasi as $index=>$ks){
        //     // dd($index);
        //     // dd($ks[0]);
        //     // dd(Carbon::createFromFormat('d/m/Y', )->format('Y-m-d'));
        //     if($header_temp !== $ks[0] ){
        //         // if($index == array_key_last($konsyinasi)){
        //         //     dd($ks, $total_amount, $total_hpp, $total_quantity);
        //         // }
        //         if($total_amount > 0){
        //             // $header_temp = str_replace("\xEF\xBB\xBF", '', $header_temp);
        //             // $header_temp = trim(preg_replace('/[[:cntrl:]]/', '', $header_temp));
        //             // var_dump($header_temp, (string)$ks[0]);
        //             // dd($header_temp, $ks[0]);
        //             $created_sale = Sale::where('note','=',$header_temp)->first();
        //             // dd($created_sale);
        //             if($total_amount > $created_sale->total_amount){
        //                 $created_sale->update([
        //                     'paid_amount' => $total_amount,
        //                     'total_amount' =>  $total_amount,
        //                     'total_quantity' => $total_quantity,
        //                 ]);
        //             }
        //             if($total_hpp > 0){
        //                 Helper::addNewTransaction([
        //                     'date' => $created_sale->date,
        //                     'label' => "Sale Invoice for #". $created_sale->reference,
        //                     'description' => "Order ID: ".$created_sale->reference,
        //                     'purchase_id' => null,
        //                     'purchase_payment_id' => null,
        //                     'purchase_return_id' => null,
        //                     'purchase_return_payment_id' => null,
        //                     'sale_id' => $created_sale->id,
        //                     'sale_payment_id' => null,
        //                     'sale_return_id' => null,
        //                     'sale_return_payment_id' => null,
        //                 ], [
        //                     [
        //                         'subaccount_number' => '1-10100', // Piutang Usaha
        //                         'amount' => $total_amount,
        //                         'type' => 'debit'
        //                     ],
        //                     [
        //                         'subaccount_number' => '5-50000', // Beban Pokok Pendapatan
        //                         'amount' => $total_hpp,
        //                         'type' => 'debit'
        //                     ],
        //                     [
        //                         'subaccount_number' => '4-40000', // Pendapatan Usaha
        //                         'amount' => $total_amount,
        //                         'type' => 'credit'
        //                     ],[
        //                         'subaccount_number' => '1-10200', // Persediaan
        //                         'amount' => $total_hpp,
        //                         'type' => 'credit'
        //                     ]
        //                 ]);
        //             }else{
        //                 Helper::addNewTransaction([
        //                     'date' => $created_sale->date,
        //                     'label' => "Sale Invoice for #". $created_sale->reference,
        //                     'description' => "Order ID: ".$created_sale->reference,
        //                     'purchase_id' => null,
        //                     'purchase_payment_id' => null,
        //                     'purchase_return_id' => null,
        //                     'purchase_return_payment_id' => null,
        //                     'sale_id' => $created_sale->id,
        //                     'sale_payment_id' => null,
        //                     'sale_return_id' => null,
        //                     'sale_return_payment_id' => null,
        //                 ], [
        //                     [
        //                         'subaccount_number' => '1-10100', // Piutang Usaha
        //                         'amount' => $total_amount,
        //                         'type' => 'debit'
        //                     ],
        //                     [
        //                         'subaccount_number' => '4-40001', // Pendapatan Usaha
        //                         'amount' => $total_amount,
        //                         'type' => 'credit'
        //                     ]
        //                 ]);
        //             }
        //             $created_payment = SalePayment::create([
        //                 'date' => Carbon::createFromFormat('d/m/Y', $ks[1])->format('Y-m-d H:i:s'),
        //                 'reference' => 'INV/'.$created_sale->reference,
        //                 'amount' => $total_amount,
        //                 'sale_id' => $created_sale->id,
        //                 'payment_method' => '1-10002'
        //             ]);
        //             Helper::addNewTransaction([
        //                 'date'=> $ks[1],
        //                 'label' => "Payment for Sales Order #".$created_sale->reference,
        //                 'description' => "Sale ID: ".$created_sale->reference,
        //                 'purchase_id' => null,
        //                 'purchase_payment_id' => null,
        //                 'purchase_return_id' => null,
        //                 'purchase_return_payment_id' => null,
        //                 'sale_id' => null,
        //                 'sale_payment_id' => $created_payment->id,
        //                 'sale_return_id' => null,
        //                 'sale_return_payment_id' => null,
        //             ], [
        //                 [
        //                     'subaccount_number' => '1-10100', // Piutang Usaha
        //                     'amount' => $created_payment->amount,
        //                     'type' => 'debit'
        //                 ],
        //                 [
        //                     'subaccount_number' => $created_payment->payment_method, // Kas
        //                     'amount' => $created_payment->amount,
        //                     'type' => 'credit'
        //                 ]
        //             ]);
        //             $total_amount = 0;
        //             $total_quantity = 0;
        //             $total_hpp = 0;
        //             $header_temp = trim($ks[0]);
        //             $created_sale = Sale::where('note','=',$ks[0])->first();
        //             if(!$created_sale){
        //                 $customer = Customer::where('customer_name', $ks[10])->first();
        //                 if(!$customer){
        //                     $customer = Customer::create([
        //                         'customer_name' => $ks[10],
        //                         'customer_email'=> $ks[12],
        //                         'customer_phone'=> $ks[11],
        //                         'city' => $ks[14],
        //                         'address'=> $ks[14],
        //                         'country' => 'Indonesia'
        //                     ]);
        //                     // dd($customer);
        //                 }
        //                 $created_sale = Sale::create([
        //                     'date' => Carbon::createFromFormat('d/m/Y', $ks[1])->format('Y-m-d H:i:s'),
        //                     'reference' =>$ks[0],
        //                     'customer_id' => $customer->id,
        //                     'customer_name' => $customer->customer_name,
        //                     'tax_percentage' => 0,
        //                     'discount_percentage' => 0,
        //                     'shipping_amount' => 0,
        //                     'paid_amount' => $ks[9],
        //                     'total_amount' => $ks[9],
        //                     'total_quantity' => $ks[4],
        //                     'fee_amount' => $ks[16],
        //                     'due_amount' => 0,
        //                     'status' => 'Completed',
        //                     'payment_status' => 'Paid',
        //                     'payment_method' => '1-10002',
        //                     'note' => $ks[0],
        //                     'tax_amount' => 0,
        //                     'discount_amount' => 0,
        //                 ]);
        //                 $product = Product::where('product_code', $ks[2])->first();
        //                 if(!$product){
        //                     // dd($ks[2]);
        //                     $product = Product::create([
        //                         'category_id' => 99,
        //                         'accessory_code' => '-',
        //                         'product_name' => $ks[3],
        //                         'product_code' => $ks[2],
        //                         'product_barcode_symbology' => 'C128',
        //                         'product_price' => 0,
        //                         'product_cost' => 0,
        //                         'product_unit' => 'Unit',
        //                         'product_quantity' => 0,
        //                         'product_stock_alert' => -1,
        //                     ]);
        //                 }
        //                 SaleDetails::create([
        //                     'sale_id' => $created_sale->id,
        //                     'product_id' => $product->id,
        //                     'product_name' => $product->product_name,
        //                     'product_code' => $product->product_code,
        //                     'product_cost'=> $product->product_cost,
        //                     'warehouse_id'=> 99,
        //                     'quantity' => $ks[4],
        //                     'price' => (int)$ks[8] / $ks[4],
        //                     'unit_price' => (int)$ks[8] / $ks[4],
        //                     'sub_total' => $ks[8],
        //                     'product_discount_amount' => 0,
        //                     'product_discount_type' => 'fixed',
        //                     'product_tax_amount' => 0,
        //                 ]);
        //                 $mutation = Mutation::with('product')->where('product_id', $product->id)
        //                 ->where('warehouse_id', 99)
        //                 ->latest()->first();
        //                 $_stock_early = $mutation ? $mutation->stock_last : 0;
        //                 $_stock_in = 0;
        //                 $_stock_out = $ks[4];
        //                 $_stock_last = $_stock_early - $_stock_out;
        //                 // dd($purchase->id)
        //                 // $purchase = Purchase::where('id', $ks[1])->first();
        //                 Mutation::create([
        //                     'reference' => $created_sale->reference,
        //                     'date' => $created_sale->date,
        //                     'mutation_type' => "Out",
        //                     'note' => "Mutation for Sale: ". $created_sale->reference,
        //                     'warehouse_id' => 99,
        //                     'product_id' => $product->id,
        //                     'stock_early' => $_stock_early,
        //                     'stock_in' => $_stock_in,
        //                     'stock_out'=> $_stock_out,
        //                     'stock_last'=> $_stock_last,
        //                 ]);

        //                 $product->update([
        //                     'product_quantity' => $_stock_last,
        //                     'product_price' => (int)$ks[8] / $ks[4]
        //                 ]);
        //                 $total_amount += (int)$ks[8];
        //                 $total_quantity += $ks[4];
        //                 $total_hpp += $product->product_cost * $ks[4];
        //             }
        //             if($index == array_key_last($konsyinasi)){
        //                 // dd($ks, $total_amount, $total_hpp, $total_quantity);
        //                 if($total_amount > 0){
        //                     $created_sale = Sale::where('note','=',$header_temp)->first();
        //                     // dd($created_sale);
        //                     if($total_amount > $created_sale->total_amount){
        //                         $created_sale->update([
        //                             'paid_amount' => $total_amount,
        //                             'total_amount' =>  $total_amount,
        //                             'total_quantity' => $total_quantity,
        //                         ]);
        //                     }
        //                     if($total_hpp > 0){
        //                         Helper::addNewTransaction([
        //                             'date' => $created_sale->date,
        //                             'label' => "Sale Invoice for #". $created_sale->reference,
        //                             'description' => "Order ID: ".$created_sale->reference,
        //                             'purchase_id' => null,
        //                             'purchase_payment_id' => null,
        //                             'purchase_return_id' => null,
        //                             'purchase_return_payment_id' => null,
        //                             'sale_id' => $created_sale->id,
        //                             'sale_payment_id' => null,
        //                             'sale_return_id' => null,
        //                             'sale_return_payment_id' => null,
        //                         ], [
        //                             [
        //                                 'subaccount_number' => '1-10100', // Piutang Usaha
        //                                 'amount' => $total_amount,
        //                                 'type' => 'debit'
        //                             ],
        //                             [
        //                                 'subaccount_number' => '5-50000', // Beban Pokok Pendapatan
        //                                 'amount' => $total_hpp,
        //                                 'type' => 'debit'
        //                             ],
        //                             [
        //                                 'subaccount_number' => '4-40000', // Pendapatan Usaha
        //                                 'amount' => $total_amount,
        //                                 'type' => 'credit'
        //                             ],[
        //                                 'subaccount_number' => '1-10200', // Persediaan
        //                                 'amount' => $total_hpp,
        //                                 'type' => 'credit'
        //                             ]
        //                         ]);
        //                     }else{
        //                         Helper::addNewTransaction([
        //                             'date' => $created_sale->date,
        //                             'label' => "Sale Invoice for #". $created_sale->reference,
        //                             'description' => "Order ID: ".$created_sale->reference,
        //                             'purchase_id' => null,
        //                             'purchase_payment_id' => null,
        //                             'purchase_return_id' => null,
        //                             'purchase_return_payment_id' => null,
        //                             'sale_id' => $created_sale->id,
        //                             'sale_payment_id' => null,
        //                             'sale_return_id' => null,
        //                             'sale_return_payment_id' => null,
        //                         ], [
        //                             [
        //                                 'subaccount_number' => '1-10100', // Piutang Usaha
        //                                 'amount' => $total_amount,
        //                                 'type' => 'debit'
        //                             ],
        //                             [
        //                                 'subaccount_number' => '4-40001', // Pendapatan Usaha
        //                                 'amount' => $total_amount,
        //                                 'type' => 'credit'
        //                             ]
        //                         ]);
        //                     }
        //                     $created_payment = SalePayment::create([
        //                         'date' => Carbon::createFromFormat('d/m/Y', $ks[1])->format('Y-m-d H:i:s'),
        //                         'reference' => 'INV/'.$created_sale->reference,
        //                         'amount' => $total_amount,
        //                         'sale_id' => $created_sale->id,
        //                         'payment_method' => '1-10002'
        //                     ]);
        //                     Helper::addNewTransaction([
        //                         'date'=> $ks[1],
        //                         'label' => "Payment for Sales Order #".$created_sale->reference,
        //                         'description' => "Sale ID: ".$created_sale->reference,
        //                         'purchase_id' => null,
        //                         'purchase_payment_id' => null,
        //                         'purchase_return_id' => null,
        //                         'purchase_return_payment_id' => null,
        //                         'sale_id' => null,
        //                         'sale_payment_id' => $created_payment->id,
        //                         'sale_return_id' => null,
        //                         'sale_return_payment_id' => null,
        //                     ], [
        //                         [
        //                             'subaccount_number' => '1-10100', // Piutang Usaha
        //                             'amount' => $created_payment->amount,
        //                             'type' => 'debit'
        //                         ],
        //                         [
        //                             'subaccount_number' => $created_payment->payment_method, // Kas
        //                             'amount' => $created_payment->amount,
        //                             'type' => 'credit'
        //                         ]
        //                     ]);
        //                     $total_amount = 0;
        //                     $total_quantity = 0;
        //                     $total_hpp = 0;
        //                 }
        //             }
                    
        //         }else{
        //             $created_sale = Sale::where('note','=',$ks[0])->first();
        //             $customer = Customer::where('customer_name', $ks[10])->first();
        //             if(!$customer){
        //                 $customer = Customer::create([
        //                     'customer_name' => $ks[10],
        //                     'customer_email'=> $ks[12],
        //                     'customer_phone'=> $ks[11],
        //                     'city' => $ks[14],
        //                     'address'=> $ks[14],
        //                     'country' => 'Indonesia'
        //                 ]);
        //             }
        //             // dd($customer);
        //             if(!$created_sale){
        //                 $created_sale = Sale::create([
        //                     'date' => Carbon::createFromFormat('d/m/Y', $ks[1])->format('Y-m-d H:i:s'),
        //                     'reference' =>$ks[0],
        //                     'customer_id' => $customer->id,
        //                     'customer_name' => $customer->customer_name,
        //                     'tax_percentage' => 0,
        //                     'discount_percentage' => 0,
        //                     'shipping_amount' => 0,
        //                     'paid_amount' => $ks[9],
        //                     'total_amount' => $ks[9],
        //                     'total_quantity' => $ks[4],
        //                     'fee_amount' => $ks[16],
        //                     'due_amount' => 0,
        //                     'status' => 'Completed',
        //                     'payment_status' => 'Paid',
        //                     'payment_method' => '1-10002',
        //                     'note' => $ks[0],
        //                     'tax_amount' => 0,
        //                     'discount_amount' => 0,
        //                 ]);
        //             }
        //             $product = Product::where('product_code', $ks[2])->first();
        //             if(!$product){
        //                 // dd($ks[2]);
        //                 $product = Product::create([
        //                     'category_id' => 99,
        //                     'accessory_code' => '-',
        //                     'product_name' => $ks[3],
        //                     'product_code' => $ks[2],
        //                     'product_barcode_symbology' => 'C128',
        //                     'product_price' => 0,
        //                     'product_cost' => 0,
        //                     'product_unit' => 'Unit',
        //                     'product_quantity' => 0,
        //                     'product_stock_alert' => -1,
        //                 ]);
        //             }
        //             SaleDetails::create([
        //                 'sale_id' => $created_sale->id,
        //                 'product_id' => $product->id,
        //                 'product_name' => $product->product_name,
        //                 'product_code' => $product->product_code,
        //                 'product_cost'=> $product->product_cost,
        //                 'warehouse_id'=> 99,
        //                 'quantity' => $ks[4],
        //                 'price' =>(int) $ks[8] / $ks[4],
        //                 'unit_price' =>(int) $ks[8] / $ks[4],
        //                 'sub_total' => $ks[8],
        //                 'product_discount_amount' => 0,
        //                 'product_discount_type' => 'fixed',
        //                 'product_tax_amount' => 0,
        //             ]);
        //             $mutation = Mutation::with('product')->where('product_id', $product->id)
        //             ->where('warehouse_id', 99)
        //             ->latest()->first();
        //             $_stock_early = $mutation ? $mutation->stock_last : 0;
        //             $_stock_in = 0;
        //             $_stock_out = $ks[4];
        //             $_stock_last = $_stock_early - $_stock_out;
        //             // dd($purchase->id)
        //             // $purchase = Purchase::where('id', $ks[1])->first();
        //             Mutation::create([
        //                 'reference' => $created_sale->reference,
        //                 'date' => $created_sale->date,
        //                 'mutation_type' => "Out",
        //                 'note' => "Mutation for Sale: ". $created_sale->reference,
        //                 'warehouse_id' => 99,
        //                 'product_id' => $product->id,
        //                 'stock_early' => $_stock_early,
        //                 'stock_in' => $_stock_in,
        //                 'stock_out'=> $_stock_out,
        //                 'stock_last'=> $_stock_last,
        //             ]);
        //             $product->update([
        //                 'product_quantity' => $_stock_last,
        //                 'product_price' => (int)$ks[8] / $ks[4]
        //             ]);
        //             $total_amount += $ks[8];
        //             $total_quantity += $ks[4];
        //             $total_hpp += $product->product_cost * $ks[4];
        //             $header_temp = trim($ks[0]);
        //             // dd($header_temp);
                    
        //         }
        //     }else{
        //         $product = Product::where('product_code', $ks[2])->first();
        //         // dd($created_sale->id);
        //         // dd($product);
        //         if(!$product){
        //             $product = Product::create([
        //                 'category_id' => 99,
        //                 'accessory_code' => '-',
        //                 'product_name' => $ks[3],
        //                 'product_code' => $ks[2],
        //                 'product_barcode_symbology' => 'C128',
        //                 'product_price' => 0,
        //                 'product_cost' => 0,
        //                 'product_unit' => 'Unit',
        //                 'product_quantity' => 0,
        //                 'product_stock_alert' => -1,
        //             ]);
        //         }
        //         SaleDetails::create([
        //             'sale_id' => $created_sale->id,
        //             'product_id' => $product->id,
        //             'product_name' => $product->product_name,
        //             'product_code' => $product->product_code,
        //             'product_cost'=> $product->product_cost,
        //             'warehouse_id'=> 99,
        //             'quantity' => $ks[4],
        //             'price' => (int)$ks[8] / $ks[4],
        //             'unit_price' => (int)$ks[8] / $ks[4],
        //             'sub_total' => $ks[8],
        //             'product_discount_amount' => 0,
        //             'product_discount_type' => 'fixed',
        //             'product_tax_amount' => 0,
        //         ]);
        //         $mutation = Mutation::with('product')->where('product_id', $product->id)
        //         ->where('warehouse_id', 99)
        //         ->latest()->first();
        //         $_stock_early = $mutation ? $mutation->stock_last : 0;
        //         $_stock_in = 0;
        //         $_stock_out = $ks[4];
        //         $_stock_last = $_stock_early - $_stock_out;
        //         // dd($purchase->id)
        //         // $purchase = Purchase::where('id', $ks[1])->first();
        //         Mutation::create([
        //             'reference' => $created_sale->reference,
        //             'date' => $created_sale->date,
        //             'mutation_type' => "Out",
        //             'note' => "Mutation for Sale: ". $created_sale->reference,
        //             'warehouse_id' => 99,
        //             'product_id' => $product->id,
        //             'stock_early' => $_stock_early,
        //             'stock_in' => $_stock_in,
        //             'stock_out'=> $_stock_out,
        //             'stock_last'=> $_stock_last,
        //         ]);
        //         $product->update([
        //             'product_quantity' => $_stock_last,
        //             'product_price' => (int)$ks[8] / $ks[4]
        //         ]);
        //         $total_amount +=(int) $ks[8];
        //         $total_quantity += $ks[4];
        //         $total_hpp += $product->product_cost * $ks[4];

        //         if($index == array_key_last($konsyinasi)){
        //             // dd($ks, $total_amount, $total_hpp, $total_quantity);
        //             if($total_amount > 0){
        //                 $created_sale = Sale::where('note','=',$header_temp)->first();
        //                 // dd($created_sale);
        //                 if($total_amount > $created_sale->total_amount){
        //                     $created_sale->update([
        //                         'paid_amount' => $total_amount,
        //                         'total_amount' =>  $total_amount,
        //                         'total_quantity' => $total_quantity,
        //                     ]);
        //                 }
        //                 if($total_hpp > 0){
        //                     Helper::addNewTransaction([
        //                         'date' => $created_sale->date,
        //                         'label' => "Sale Invoice for #". $created_sale->reference,
        //                         'description' => "Order ID: ".$created_sale->reference,
        //                         'purchase_id' => null,
        //                         'purchase_payment_id' => null,
        //                         'purchase_return_id' => null,
        //                         'purchase_return_payment_id' => null,
        //                         'sale_id' => $created_sale->id,
        //                         'sale_payment_id' => null,
        //                         'sale_return_id' => null,
        //                         'sale_return_payment_id' => null,
        //                     ], [
        //                         [
        //                             'subaccount_number' => '1-10100', // Piutang Usaha
        //                             'amount' => $total_amount,
        //                             'type' => 'debit'
        //                         ],
        //                         [
        //                             'subaccount_number' => '5-50000', // Beban Pokok Pendapatan
        //                             'amount' => $total_hpp,
        //                             'type' => 'debit'
        //                         ],
        //                         [
        //                             'subaccount_number' => '4-40000', // Pendapatan Usaha
        //                             'amount' => $total_amount,
        //                             'type' => 'credit'
        //                         ],[
        //                             'subaccount_number' => '1-10200', // Persediaan
        //                             'amount' => $total_hpp,
        //                             'type' => 'credit'
        //                         ]
        //                     ]);
        //                 }else{
        //                     Helper::addNewTransaction([
        //                         'date' => $created_sale->date,
        //                         'label' => "Sale Invoice for #". $created_sale->reference,
        //                         'description' => "Order ID: ".$created_sale->reference,
        //                         'purchase_id' => null,
        //                         'purchase_payment_id' => null,
        //                         'purchase_return_id' => null,
        //                         'purchase_return_payment_id' => null,
        //                         'sale_id' => $created_sale->id,
        //                         'sale_payment_id' => null,
        //                         'sale_return_id' => null,
        //                         'sale_return_payment_id' => null,
        //                     ], [
        //                         [
        //                             'subaccount_number' => '1-10100', // Piutang Usaha
        //                             'amount' => $total_amount,
        //                             'type' => 'debit'
        //                         ],
        //                         [
        //                             'subaccount_number' => '4-40001', // Pendapatan Usaha
        //                             'amount' => $total_amount,
        //                             'type' => 'credit'
        //                         ]
        //                     ]);
        //                 }
        //                 $created_payment = SalePayment::create([
        //                     'date' => Carbon::createFromFormat('d/m/Y', $ks[1])->format('Y-m-d H:i:s'),
        //                     'reference' => 'INV/'.$created_sale->reference,
        //                     'amount' => $total_amount,
        //                     'sale_id' => $created_sale->id,
        //                     'payment_method' => '1-10002'
        //                 ]);
        //                 Helper::addNewTransaction([
        //                     'date'=> $ks[1],
        //                     'label' => "Payment for Sales Order #".$created_sale->reference,
        //                     'description' => "Sale ID: ".$created_sale->reference,
        //                     'purchase_id' => null,
        //                     'purchase_payment_id' => null,
        //                     'purchase_return_id' => null,
        //                     'purchase_return_payment_id' => null,
        //                     'sale_id' => null,
        //                     'sale_payment_id' => $created_payment->id,
        //                     'sale_return_id' => null,
        //                     'sale_return_payment_id' => null,
        //                 ], [
        //                     [
        //                         'subaccount_number' => '1-10100', // Piutang Usaha
        //                         'amount' => $created_payment->amount,
        //                         'type' => 'debit'
        //                     ],
        //                     [
        //                         'subaccount_number' => $created_payment->payment_method, // Kas
        //                         'amount' => $created_payment->amount,
        //                         'type' => 'credit'
        //                     ]
        //                 ]);
        //                 $total_amount = 0;
        //                 $total_quantity = 0;
        //                 $total_hpp = 0;
        //             }
        //         }
        //     }
        // }



        //  //pembelian header
        //  $csvFileName = "header_bekasi.csv";
        //  $csvFile = public_path('csv/' . $csvFileName);
        //  $konsyinasi = $this->readCSV($csvFile,array('delimiter' => ';'));
        // //  dd($konsyinasi);    
        //  $header_temp;
        //  foreach($konsyinasi as $ks){
        //     // dd(Carbon::createFromFormat('d/m/Y',$ks[2])->subHour(7)->format('Y-m-d H:i:s'));
        //      $purchase = Purchase::create([
        //          'id' => $ks[1],
        //          'date' =>Carbon::createFromFormat('d/m/Y',$ks[2])->subHour(7)->format('Y-m-d H:i:s'),
        //          'due_date' => $ks[10],
        //          'reference_supplier'=> $ks[0],
        //          'supplier_id' => $ks[3],
        //          'supplier_name' => Supplier::findOrFail($ks[3])->supplier_name,
        //          'tax_percentage' => 0,
        //          'discount_percentage' => 0,
        //          'shipping_amount' => $ks[5],
        //          'paid_amount' => $ks[8] == 'Paid' ? $ks[6] : 0 ,
        //          'total_amount' => (int)$ks[6],
        //          'due_amount' => $ks[8] == 'Unpaid' ? $ks[6] : 0,
        //          'status' => $ks[7],
        //          'total_quantity' => $ks[11],
        //          'payment_status' => $ks[8],
        //          'payment_method' => $ks[9],
        //          'note' => $ks[0],
        //          'tax_amount' => 0,
        //          'discount_amount' => 0,
        //      ]);
        //      Helper::addNewTransaction([
        //          'date' => $ks[2],
        //          'label' => "Purchase Invoice for #". $purchase->reference,
        //          'description' => "Order ID: ".$purchase->reference,
        //          'purchase_id' => $purchase->id,
        //          'purchase_payment_id' => null,
        //          'purchase_return_id' => null,
        //          'purchase_return_payment_id' => null,
        //          'sale_id' => null,
        //          'sale_payment_id' => null,
        //          'sale_return_id' => null,
        //          'sale_return_payment_id' => null,
        //      ], [
        //          [
        //              'subaccount_number' => '1-10200', // Beban Pokok Pendapatan
        //              'amount' => $purchase->total_amount,
        //              'type' => 'debit'
        //          ],
        //          [
        //              'subaccount_number' => '2-20100', // Hutang usaha
        //              'amount' => $purchase->total_amount,
        //              'type' => 'credit'
        //          ]
        //      ]);
        //      if($ks[8] == 'Paid'){
        //          $created_payment = PurchasePayment::create([
        //              'date' => $ks[2],
        //              'reference' => $purchase->reference,
        //              'amount' => $purchase->paid_amount,
        //              'note' => 'Payment',
        //              'purchase_id' => $purchase->id,
        //              'payment_method' => '1-10002'
        //          ]);
        //          Helper::addNewTransaction([
        //              'date'=> $ks[2],
        //              'label' => "Payment for Purchase Order #".$purchase->reference,
        //              'description' => "Purchase ID: ".$purchase->reference,
        //              'purchase_id' => null,
        //              'purchase_payment_id' => $created_payment->id,
        //              'purchase_return_id' => null,
        //              'purchase_return_payment_id' => null,
        //              'sale_id' => null,
        //              'sale_payment_id' => null,
        //              'sale_return_id' => null,
        //              'sale_return_payment_id' => null,
        //          ], [
        //              [
        //                  'subaccount_number' => '1-10200', // Persediaan dalam pengiriman
        //                  'amount' => $created_payment->amount,
        //                  'type' => 'debit'
        //              ],
        //              [
        //                  'subaccount_number' => $created_payment->payment_method, // Kas
        //                  'amount' => $created_payment->amount,
        //                  'type' => 'credit'
        //              ]
        //          ]);
 
        //         }
        //     }




        //  //purchase_detail
        //  $csvFileName = "penj_2024.csv";
        //  $csvFile = public_path('csv/' . $csvFileName);
        //  $konsyinasi = $this->readCSV($csvFile,array('delimiter' => ';'));
        //  $header_temp;
        //  $jasa_kirim=0;
        // //  dd($konsyinasi);
        //  foreach($konsyinasi as $ks){
        //      // $header_temp = $ks[0];
        //      $product = Product::where('product_code', $ks[3])->first();
        //      if(!$product){
        //          $product = Product::create([
        //              'category_id' => 99,
        //              'accessory_code' => '-',
        //              'product_name' => $ks[4],
        //              'product_code' => $ks[3],
        //              'product_barcode_symbology' => 'C128',
        //              'product_price' => 0,
        //              'product_cost' => 0,
        //              'product_unit' => 'Unit',
        //              'product_quantity' => 0,
        //              'product_stock_alert' => -1,
        //          ]);
        //      }
             
        //      // $product = Product::findOrFail($cart_item->id);
        //      PurchaseDetail::create([
        //          'purchase_id' => $ks[1],
        //          'product_id' => $product->id,
        //          'product_name' => $product->product_name,
        //          'product_code' => $product->product_code,
        //          'quantity' => $ks[5],
        //          'price' => $ks[6],
        //          'unit_price' => $ks[6],
        //          'sub_total' => (int)$ks[6] * (int)$ks[5],
        //          'product_discount_amount' => 0,
        //          'product_discount_type' => 'fixed',
        //          'product_tax_amount' => 0,
        //      ]);
        //      if($ks[3] != 'OTH-SERTRANSPORT' && $ks[3] != 'OTH-PETIKAYU'){
        //         $mutation = Mutation::with('product')->where('product_id', $product->id)
        //         ->where('warehouse_id', 99)
        //         ->latest()->first();
        //         if($mutation){
        //             if($mutation->stock_last == 0){
        //                 $product->update([
        //                     'product_cost' => (int)$ks[6] + ($ks[9] / $ks[14]),
        //                     'product_quantity' => $product->product_quantity + $ks[5]
        //                 ]);
                        
        //             }else{
        //                 $product->update([
        //                     'product_cost' => ($product->product_cost * $product->product_quantity + ((int)$ks[6] * (int)$ks[5])) / ((int)$ks[5] + $product->product_quantity),
        //                     'product_quantity' => $product->product_quantity + $ks[5]
        //                 ]);
        //             }
        //         }else{
        //             $product->update([
        //                 'product_cost' => (int)$ks[6] + ((int)$ks[9] / (int)$ks[14]),
        //                 'product_quantity' => $product->product_quantity + $ks[5]
        //                 // 'product_quantity' => $product->product_quantity + $cart_item->qty
        //             ]);
        //         }
                
        //         $_stock_early = $mutation ? $mutation->stock_last : 0;
        //         $_stock_in = $ks[5];
        //         $_stock_out = 0;
        //         $_stock_last = $_stock_early + $_stock_in;
        //         // dd($purchase->id)
        //         $purchase = Purchase::where('id', $ks[1])->first();
        //         Mutation::create([
        //             'reference' => $purchase->reference,
        //             'date' => $purchase->date,
        //             'mutation_type' => "In",
        //             'note' => "Mutation for Purchase: ". $purchase->reference,
        //             'warehouse_id' => 99,
        //             'product_id' => $product->id,
        //             'stock_early' => $_stock_early,
        //             'stock_in' => $_stock_in,
        //             'stock_out'=> $_stock_out,
        //             'stock_last'=> $_stock_last,
        //         ]);
        //     }
        //  }
 